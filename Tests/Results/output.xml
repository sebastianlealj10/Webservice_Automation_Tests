<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20190804 20:39:53.399" rpa="false">
<suite id="s1" name="Rest-Api" source="/home/sebas/PycharmProjects/WebService/Tests/rest-api.robot">
<test id="s1-t1" name="System must make a get request">
<kw name="Create Session" library="ExtendedRequestsLibrary">
<doc>Create and return a HTTP session object to a server.</doc>
<arguments>
<arg>localhost</arg>
<arg>http://localhost:3000</arg>
</arguments>
<msg timestamp="20190804 20:39:53.468" level="INFO">Creating Session using : alias=localhost, url=http://localhost:3000, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190804 20:39:53.468" endtime="20190804 20:39:53.468"></status>
</kw>
<kw name="Get Request" library="ExtendedRequestsLibrary">
<doc>Send a GET request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>localhost</arg>
<arg>/posts</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190804 20:39:53.474" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190804 20:39:53.468" endtime="20190804 20:39:53.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190804 20:39:53.474" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190804 20:39:53.474" endtime="20190804 20:39:53.474"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20190804 20:39:53.474" level="INFO">${json} = [{'id': 1, 'title': 'json-server', 'author': 'typicode'}, {'id': '2', 'title': 'jsonserver', 'author': 'sebas'}, {'id': '3', 'title': 'jsonserver', 'author': 'sebas'}, {'id': '4', 'title': 'jsonserver...</msg>
<status status="PASS" starttime="20190804 20:39:53.474" endtime="20190804 20:39:53.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20190804 20:39:53.475" level="INFO">[{'id': 1, 'title': 'json-server', 'author': 'typicode'}, {'id': '2', 'title': 'jsonserver', 'author': 'sebas'}, {'id': '3', 'title': 'jsonserver', 'author': 'sebas'}, {'id': '4', 'title': 'jsonserver', 'author': 'sebas'}]</msg>
<status status="PASS" starttime="20190804 20:39:53.475" endtime="20190804 20:39:53.475"></status>
</kw>
<doc>Make a Get Request to the json-server</doc>
<tags>
<tag>Webservices</tag>
</tags>
<status status="PASS" starttime="20190804 20:39:53.468" endtime="20190804 20:39:53.475" critical="yes"></status>
</test>
<test id="s1-t2" name="System must make a post request">
<kw name="Create Session" library="ExtendedRequestsLibrary">
<doc>Create and return a HTTP session object to a server.</doc>
<arguments>
<arg>localhost</arg>
<arg>http://localhost:3000</arg>
</arguments>
<msg timestamp="20190804 20:39:53.475" level="INFO">Creating Session using : alias=localhost, url=http://localhost:3000, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190804 20:39:53.475" endtime="20190804 20:39:53.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${idnumber}</arg>
<arg>title=jsonserver</arg>
<arg>author=sebas</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190804 20:39:53.476" level="INFO">&amp;{data} = { id=5 | title=jsonserver | author=sebas }</msg>
<status status="PASS" starttime="20190804 20:39:53.475" endtime="20190804 20:39:53.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>content-type=application/json</arg>
</arguments>
<assign>
<var>&amp;{header}</var>
</assign>
<msg timestamp="20190804 20:39:53.476" level="INFO">&amp;{header} = { content-type=application/json }</msg>
<status status="PASS" starttime="20190804 20:39:53.476" endtime="20190804 20:39:53.476"></status>
</kw>
<kw name="Post Request" library="ExtendedRequestsLibrary">
<doc>Send a POST request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>localhost</arg>
<arg>/posts</arg>
<arg>json=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190804 20:39:53.481" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20190804 20:39:53.476" endtime="20190804 20:39:53.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190804 20:39:53.481" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190804 20:39:53.481" endtime="20190804 20:39:53.481"></status>
</kw>
<status status="PASS" starttime="20190804 20:39:53.475" endtime="20190804 20:39:53.481" critical="yes"></status>
</test>
<doc>Testing webservices using https://github.com/typicode/json-server</doc>
<status status="PASS" starttime="20190804 20:39:53.399" endtime="20190804 20:39:53.481"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">Webservices</stat>
</tag>
<suite>
<stat pass="2" fail="0" id="s1" name="Rest-Api">Rest-Api</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
